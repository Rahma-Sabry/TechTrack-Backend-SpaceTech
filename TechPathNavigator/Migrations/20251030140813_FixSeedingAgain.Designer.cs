// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechPathNavigator.Data;

#nullable disable

namespace TechPathNavigator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251030140813_FixSeedingAgain")]
    partial class FixSeedingAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechPathNavigator.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Backend Development",
                            Description = "Server-side programming"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Frontend Development",
                            Description = "Client-side development"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Mobile Development",
                            Description = "Building mobile applications"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Microsoft",
                            Description = "Software and cloud company",
                            Industry = "Technology",
                            WebsiteUrl = "https://microsoft.com"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "Google",
                            Description = "Search and AI company",
                            Industry = "Technology",
                            WebsiteUrl = "https://google.com"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.CompanyTechnology", b =>
                {
                    b.Property<int>("CompanyTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyTechnologyId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<string>("UsageLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyTechnologyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CompanyTechnologies");

                    b.HasData(
                        new
                        {
                            CompanyTechnologyId = 1,
                            CompanyId = 1,
                            Notes = "Used heavily in backend systems",
                            TechnologyId = 1,
                            UsageLevel = "primary"
                        },
                        new
                        {
                            CompanyTechnologyId = 2,
                            CompanyId = 2,
                            Notes = "Used for scalable services",
                            TechnologyId = 3,
                            UsageLevel = "primary"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.InterviewQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("DifficultyLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("InterviewQuestions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            DifficultyLevel = "Intermediate",
                            QuestionText = "Explain the difference between value and reference types in C#.",
                            QuestionType = "Technical",
                            SampleAnswer = "Value types store data directly; reference types store references.",
                            TechnologyId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            DifficultyLevel = "Intermediate",
                            QuestionText = "What is the event loop in Node.js?",
                            QuestionType = "Technical",
                            SampleAnswer = "It manages asynchronous operations in Node.js runtime.",
                            TechnologyId = 3
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.Roadmap", b =>
                {
                    b.Property<int>("RoadmapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadmapId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("RoadmapId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("TrackId");

                    b.ToTable("Roadmaps");

                    b.HasData(
                        new
                        {
                            RoadmapId = 1,
                            Description = "Steps to become backend developer",
                            Title = "Backend Developer Roadmap",
                            TrackId = 1
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.RoadmapStep", b =>
                {
                    b.Property<int>("RoadmapStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadmapStepId"));

                    b.Property<int>("RoadmapId")
                        .HasColumnType("int");

                    b.Property<string>("StepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("StepTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoadmapStepId");

                    b.HasIndex("RoadmapId");

                    b.ToTable("RoadmapSteps");

                    b.HasData(
                        new
                        {
                            RoadmapStepId = 1,
                            RoadmapId = 1,
                            StepDescription = "Understand syntax and OOP",
                            StepOrder = 1,
                            StepTitle = "Learn C# Basics"
                        },
                        new
                        {
                            RoadmapStepId = 2,
                            RoadmapId = 1,
                            StepDescription = "Build REST APIs",
                            StepOrder = 2,
                            StepTitle = "Learn ASP.NET Web API"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            CategoryId = 1,
                            Description = "Learn backend with .NET",
                            DifficultyLevel = "Intermediate",
                            EstimatedDuration = 120,
                            SubCategoryName = "C# & .NET"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            CategoryId = 1,
                            Description = "JavaScript backend development",
                            DifficultyLevel = "Intermediate",
                            EstimatedDuration = 100,
                            SubCategoryName = "Node.js"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            CategoryId = 2,
                            Description = "Frontend with React",
                            DifficultyLevel = "Beginner",
                            EstimatedDuration = 90,
                            SubCategoryName = "React"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnologyId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnologyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TechnologyId");

                    b.HasIndex("TrackId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            TechnologyId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Language for .NET backend",
                            TechnologyName = "C#",
                            TrackId = 1
                        },
                        new
                        {
                            TechnologyId = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ORM for .NET",
                            TechnologyName = "Entity Framework Core",
                            TrackId = 1
                        },
                        new
                        {
                            TechnologyId = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "JavaScript runtime",
                            TechnologyName = "Node.js",
                            TrackId = 2
                        },
                        new
                        {
                            TechnologyId = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Frontend library",
                            TechnologyName = "React",
                            TrackId = 3
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            Description = "RESTful APIs with .NET",
                            DifficultyLevel = "Intermediate",
                            EstimatedDuration = 150,
                            SubCategoryId = 1,
                            TrackName = "ASP.NET Web API"
                        },
                        new
                        {
                            TrackId = 2,
                            Description = "Server-side Node.js development",
                            DifficultyLevel = "Intermediate",
                            EstimatedDuration = 120,
                            SubCategoryId = 2,
                            TrackName = "Express.js Backend"
                        },
                        new
                        {
                            TrackId = 3,
                            Description = "Frontend development with React",
                            DifficultyLevel = "Beginner",
                            EstimatedDuration = 80,
                            SubCategoryId = 3,
                            TrackName = "React Basics"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            PasswordHash = "CHANGE_ME_HASH",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.UserTechnologyReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTechnologyReviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Rating = 5,
                            ReviewText = "Excellent technology for backend.",
                            TechnologyId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TechPathNavigator.Models.CompanyTechnology", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Company", "Company")
                        .WithMany("CompanyTechnologies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechPathNavigator.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("TechPathNavigator.Models.InterviewQuestion", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Roadmap", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Technology", null)
                        .WithMany("Roadmaps")
                        .HasForeignKey("TechnologyId");

                    b.HasOne("TechPathNavigator.Models.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TechPathNavigator.Models.RoadmapStep", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Roadmap", "Roadmap")
                        .WithMany("RoadmapSteps")
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roadmap");
                });

            modelBuilder.Entity("TechPathNavigator.Models.SubCategory", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Technology", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Track", "Track")
                        .WithMany("Technologies")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Track", b =>
                {
                    b.HasOne("TechPathNavigator.Models.SubCategory", "SubCategory")
                        .WithMany("Tracks")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("TechPathNavigator.Models.UserTechnologyReview", b =>
                {
                    b.HasOne("TechPathNavigator.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechPathNavigator.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Company", b =>
                {
                    b.Navigation("CompanyTechnologies");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Roadmap", b =>
                {
                    b.Navigation("RoadmapSteps");
                });

            modelBuilder.Entity("TechPathNavigator.Models.SubCategory", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Technology", b =>
                {
                    b.Navigation("Roadmaps");
                });

            modelBuilder.Entity("TechPathNavigator.Models.Track", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("TechPathNavigator.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
