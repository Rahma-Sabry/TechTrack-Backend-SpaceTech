# TechPathNavigator - Enhanced Architecture Implementation Guide

## 📁 Updated Folder Structure

```
TechPathNavigator/
├── API/
│   └── Controllers/
│       ├── CategoryController.cs
│       ├── CompanyController.cs
│       └── ...
├── BLL/
│   ├── DTOs/
│   │   ├── Category/
│   │   ├── Company/
│   │   └── ...
│   ├── Mappings/
│   │   ├── CategoryMappingProfile.cs
│   │   ├── CompanyMappingProfile.cs
│   │   └── ...
│   ├── Services/
│   │   ├── Category/
│   │   ├── Company/
│   │   └── ...
│   └── Validations/
│       ├── Category/
│       │   ├── CategoryPostDtoValidator.cs
│       │   └── CategoryPutDtoValidator.cs
│       ├── Company/
│       │   └── CompanyPostDtoValidator.cs
│       └── ...
├── Common/
│   ├── Errors/
│   │   └── ErrorMessages.cs
│   └── Results/
│       └── ServiceResult.cs
├── Configurations/
│   └── DependencyInjection.cs
├── DAL/
│   ├── Data/
│   │   └── ApplicationDbContext.cs
│   └── Repositories/
│       ├── Generic/
│       │   ├── IGenericRepository.cs
│       │   └── GenericRepository.cs
│       ├── Category/
│       │   ├── ICategoryRepository.cs
│       │   └── CategoryRepository.cs
│       └── ...
├── Extensions/
│   ├── MappingExtensions.cs
│   └── ValidationExtensions.cs
├── Models/
│   ├── Category.cs
│   ├── Company.cs
│   └── ...
├── Program.cs
├── appsettings.json
└── TechPathNavigator.csproj
```

---

## 1️⃣ Generic Repository Pattern

### DAL/Repositories/Generic/IGenericRepository.cs

```csharp
using System.Linq.Expressions;

namespace TechPathNavigator.DAL.Repositories.Generic
{
    /// <summary>
    /// Generic repository interface for common CRUD operations
    /// Reduces code duplication across repositories
    /// </summary>
    /// <typeparam name="T">Entity type</typeparam>
    public interface IGenericRepository<T> where T : class
    {
        // Read operations
        Task<IEnumerable<T>> GetAllAsync();
        Task<T?> GetByIdAsync(int id);
        Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
        
        // Write operations
        Task<T> AddAsync(T entity);
        Task<T?> UpdateAsync(T entity);
        Task<bool> DeleteAsync(int id);
        
        // Utility operations
        Task<bool> ExistsAsync(int id);
        Task<int> CountAsync();
    }
}
```

### DAL/Repositories/Generic/GenericRepository.cs

```csharp
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using TechPathNavigator.Data;

namespace TechPathNavigator.DAL.Repositories.Generic
{
    /// <summary>
    /// Generic repository implementation with Entity Framework Core
    /// Provides reusable CRUD operations for all entities
    /// </summary>
    /// <typeparam name="T">Entity type</typeparam>
    public class GenericRepository<T> : IGenericRepository<T> where T : class
    {
        protected readonly ApplicationDbContext _context;
        protected readonly DbSet<T> _dbSet;

        public GenericRepository(ApplicationDbContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        /// <summary>
        /// Retrieves all entities from the database with no tracking
        /// </summary>
        public virtual async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _dbSet.AsNoTracking().ToListAsync();
        }

        /// <summary>
        /// Retrieves a single entity by its primary key
        /// </summary>
        public virtual async Task<T?> GetByIdAsync(int id)
        {
            return await _dbSet.FindAsync(id);
        }

        /// <summary>
        /// Finds entities matching the specified predicate
        /// </summary>
        public virtual async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.Where(predicate).AsNoTracking().ToListAsync();
        }

        /// <summary>
        /// Adds a new entity to the database
        /// </summary>
        public virtual async Task<T> AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
            await _context.SaveChangesAsync();
            return entity;
        }

        /// <summary>
        /// Updates an existing entity
        /// Returns null if entity not found
        /// </summary>
        public virtual async Task<T?> UpdateAsync(T entity)
        {
            _dbSet.Update(entity);
            await _context.SaveChangesAsync();
            return entity;
        }

        /// <summary>
        /// Deletes an entity by its primary key
        /// </summary>
        public virtual async Task<bool> DeleteAsync(int id)
        {
            var entity = await GetByIdAsync(id);
            if (entity == null) return false;

            _dbSet.Remove(entity);
            await _context.SaveChangesAsync();
            return true;
        }

        /// <summary>
        /// Checks if an entity exists by its primary key
        /// </summary>
        public virtual async Task<bool> ExistsAsync(int id)
        {
            var entity = await GetByIdAsync(id);
            return entity != null;
        }

        /// <summary>
        /// Returns the total count of entities
        /// </summary>
        public virtual async Task<int> CountAsync()
        {
            return await _dbSet.CountAsync();
        }
    }
}
```

---

## 2️⃣ FluentValidation Layer

### Install NuGet Package

```bash
dotnet add package FluentValidation.AspNetCore
```

### BLL/Validations/Category/CategoryPostDtoValidator.cs

```csharp
using FluentValidation;
using TechPathNavigator.DTOs;

namespace TechPathNavigator.BLL.Validations.Category
{
    /// <summary>
    /// Validator for CategoryPostDto
    /// Ensures data integrity before processing
    /// </summary>
    public class CategoryPostDtoValidator : AbstractValidator<CategoryPostDto>
    {
        public CategoryPostDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Category name is required")
                .MaximumLength(200).WithMessage("Category name cannot exceed 200 characters")
                .Matches(@"^[a-zA-Z0-9\s\-]+$").WithMessage("Category name contains invalid characters");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Description is required")
                .MaximumLength(1000).WithMessage("Description cannot exceed 1000 characters");
        }
    }
}
```

### BLL/Validations/Company/CompanyPostDtoValidator.cs

```csharp
using FluentValidation;
using TechPathNavigator.DTOs;

namespace TechPathNavigator.BLL.Validations.Company
{
    /// <summary>
    /// Validator for CompanyPostDto
    /// Includes URL validation and business rules
    /// </summary>
    public class CompanyPostDtoValidator : AbstractValidator<CompanyPostDto>
    {
        public CompanyPostDtoValidator()
        {
            RuleFor(x => x.CompanyName)
                .NotEmpty().WithMessage("Company name is required")
                .MaximumLength(200).WithMessage("Company name cannot exceed 200 characters");

            RuleFor(x => x.Industry)
                .MaximumLength(100).WithMessage("Industry cannot exceed 100 characters");

            RuleFor(x => x.WebsiteUrl)
                .Must(BeAValidUrl).WithMessage("Invalid website URL format")
                .When(x => !string.IsNullOrWhiteSpace(x.WebsiteUrl));

            RuleFor(x => x.Description)
                .MaximumLength(2000).WithMessage("Description cannot exceed 2000 characters");
        }

        private bool BeAValidUrl(string? url)
        {
            if (string.IsNullOrWhiteSpace(url)) return true;
            return Uri.TryCreate(url, UriKind.Absolute, out var uriResult) 
                   && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        }
    }
}
```

### BLL/Validations/InterviewQuestion/InterviewQuestionPostDtoValidator.cs

```csharp
using FluentValidation;
using TechPathNavigator.DTOs;

namespace TechPathNavigator.BLL.Validations.InterviewQuestion
{
    /// <summary>
    /// Validator for InterviewQuestionPostDto
    /// Enforces business rules for interview questions
    /// </summary>
    public class InterviewQuestionPostDtoValidator : AbstractValidator<InterviewQuestionPostDto>
    {
        private static readonly string[] ValidDifficulties = { "Easy", "Medium", "Hard" };
        private static readonly string[] ValidTypes = { "Technical", "Behavioral", "SystemDesign" };

        public InterviewQuestionPostDtoValidator()
        {
            RuleFor(x => x.TechnologyId)
                .GreaterThan(0).WithMessage("Technology ID must be valid");

            RuleFor(x => x.QuestionText)
                .NotEmpty().WithMessage("Question text is required")
                .MinimumLength(10).WithMessage("Question must be at least 10 characters")
                .MaximumLength(2000).WithMessage("Question cannot exceed 2000 characters");

            RuleFor(x => x.DifficultyLevel)
                .Must(d => string.IsNullOrWhiteSpace(d) || ValidDifficulties.Contains(d))
                .WithMessage("Difficulty must be: Easy, Medium, or Hard");

            RuleFor(x => x.QuestionType)
                .Must(t => string.IsNullOrWhiteSpace(t) || ValidTypes.Contains(t))
                .WithMessage("Question type must be: Technical, Behavioral, or SystemDesign");

            RuleFor(x => x.SampleAnswer)
                .MaximumLength(5000).WithMessage("Sample answer cannot exceed 5000 characters");
        }
    }
}
```

---

## 3️⃣ AutoMapper Configuration

### Install NuGet Package

```bash
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
```

### BLL/Mappings/CategoryMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// AutoMapper profile for Category entity mappings
    /// Defines bidirectional mappings between entities and DTOs
    /// </summary>
    public class CategoryMappingProfile : Profile
    {
        public CategoryMappingProfile()
        {
            // Entity to DTO
            CreateMap<Category, CategoryGetDto>()
                .ForMember(dest => dest.CategoryName, opt => opt.MapFrom(src => src.CategoryName))
                .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.Description));

            // DTO to Entity
            CreateMap<CategoryPostDto, Category>()
                .ForMember(dest => dest.CategoryId, opt => opt.Ignore())
                .ForMember(dest => dest.CategoryName, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.SubCategories, opt => opt.Ignore());
        }
    }
}
```

### BLL/Mappings/CompanyMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// AutoMapper profile for Company entity mappings
    /// </summary>
    public class CompanyMappingProfile : Profile
    {
        public CompanyMappingProfile()
        {
            CreateMap<Company, CompanyGetDto>();

            CreateMap<CompanyPostDto, Company>()
                .ForMember(dest => dest.CompanyId, opt => opt.Ignore())
                .ForMember(dest => dest.CompanyTechnologies, opt => opt.Ignore());
        }
    }
}
```

### BLL/Mappings/TechnologyMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// AutoMapper profile for Technology entity mappings
    /// </summary>
    public class TechnologyMappingProfile : Profile
    {
        public TechnologyMappingProfile()
        {
            CreateMap<Technology, TechnologyGetDto>();

            CreateMap<TechnologyPostDto, Technology>()
                .ForMember(dest => dest.TechnologyId, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(_ => DateTime.UtcNow))
                .ForMember(dest => dest.Track, opt => opt.Ignore())
                .ForMember(dest => dest.Roadmaps, opt => opt.Ignore());
        }
    }
}
```

---

## 4️⃣ Dependency Injection Configuration

### Configurations/DependencyInjection.cs

```csharp
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.EntityFrameworkCore;
using TechPathNavigator.BLL.Validations.Category;
using TechPathNavigator.BLL.Validations.Company;
using TechPathNavigator.BLL.Validations.InterviewQuestion;
using TechPathNavigator.DAL.Repositories.Generic;
using TechPathNavigator.Data;
using TechPathNavigator.Repositories;
using TechPathNavigator.Services;

namespace TechPathNavigator.Configurations
{
    /// <summary>
    /// Centralized dependency injection configuration
    /// Separates DI setup from Program.cs for better maintainability
    /// </summary>
    public static class DependencyInjection
    {
        /// <summary>
        /// Registers all application services and dependencies
        /// </summary>
        public static IServiceCollection AddApplicationServices(
            this IServiceCollection services, 
            IConfiguration configuration)
        {
            // Database Configuration
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(
                    configuration.GetConnectionString("DefaultConnection"),
                    b => b.MigrationsAssembly("TechPathNavigator")));

            // Generic Repository Pattern
            services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

            // Specific Repositories
            RegisterRepositories(services);

            // Business Services
            RegisterServices(services);

            // AutoMapper Configuration
            services.AddAutoMapper(typeof(Program).Assembly);

            // FluentValidation Configuration
            services.AddFluentValidationAutoValidation();
            services.AddFluentValidationClientsideAdapters();
            services.AddValidatorsFromAssemblyContaining<CategoryPostDtoValidator>();

            return services;
        }

        /// <summary>
        /// Registers all repository implementations
        /// </summary>
        private static void RegisterRepositories(IServiceCollection services)
        {
            // Category & SubCategory
            services.AddScoped<ICategoryRepository, CategoryRepository>();
            services.AddScoped<ISubCategoryRepository, SubCategoryRepository>();

            // Track & Technology
            services.AddScoped<ITrackRepository, TrackRepository>();
            services.AddScoped<ITechnologyRepository, TechnologyRepository>();

            // Roadmap & Steps
            services.AddScoped<IRoadmapRepository, RoadmapRepository>();
            services.AddScoped<IRoadmapStepRepository, RoadmapStepRepository>();

            // Company & CompanyTechnology
            services.AddScoped<ICompanyRepository, CompanyRepository>();
            services.AddScoped<ICompanyTechnologyRepository, CompanyTechnologyRepository>();

            // Interview Questions
            services.AddScoped<IInterviewQuestionRepository, InterviewQuestionRepository>();

            // User & Reviews
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<IUserTechnologyReviewRepository, UserTechnologyReviewRepository>();
        }

        /// <summary>
        /// Registers all service implementations
        /// </summary>
        private static void RegisterServices(IServiceCollection services)
        {
            // Category & SubCategory Services
            services.AddScoped<ICategoryService, CategoryService>();
            services.AddScoped<ISubCategoryService, SubCategoryService>();

            // Track & Technology Services
            services.AddScoped<TrackService>();
            services.AddScoped<TechnologyService>();

            // Roadmap Services
            services.AddScoped<IRoadmapService, RoadmapService>();
            services.AddScoped<IRoadmapStepService, RoadmapStepService>();

            // Company Services
            services.AddScoped<ICompanyService, CompanyService>();
            services.AddScoped<ICompanyTechnologyService, CompanyTechnologyService>();

            // Interview Question Services
            services.AddScoped<IInterviewQuestionService, InterviewQuestionService>();

            // User Services
            services.AddScoped<UserService>();
            services.AddScoped<IUserTechnologyReviewService, UserTechnologyReviewService>();
        }
    }
}
```

---

## 5️⃣ Extension Methods

### Extensions/ValidationExtensions.cs

```csharp
using FluentValidation.Results;
using Microsoft.AspNetCore.Mvc.ModelBinding;

namespace TechPathNavigator.Extensions
{
    /// <summary>
    /// Extension methods for validation operations
    /// Provides reusable validation utilities
    /// </summary>
    public static class ValidationExtensions
    {
        /// <summary>
        /// Converts FluentValidation errors to ModelStateDictionary
        /// </summary>
        public static void AddToModelState(
            this ValidationResult result, 
            ModelStateDictionary modelState)
        {
            foreach (var error in result.Errors)
            {
                modelState.AddModelError(error.PropertyName, error.ErrorMessage);
            }
        }

        /// <summary>
        /// Gets all error messages from ValidationResult
        /// </summary>
        public static List<string> GetErrorMessages(this ValidationResult result)
        {
            return result.Errors.Select(e => e.ErrorMessage).ToList();
        }

        /// <summary>
        /// Checks if validation result has errors
        /// </summary>
        public static bool HasErrors(this ValidationResult result)
        {
            return !result.IsValid;
        }
    }
}
```

### Extensions/MappingExtensions.cs

```csharp
using AutoMapper;

namespace TechPathNavigator.Extensions
{
    /// <summary>
    /// Extension methods for AutoMapper operations
    /// Simplifies mapping operations throughout the application
    /// </summary>
    public static class MappingExtensions
    {
        /// <summary>
        /// Maps a collection of source objects to destination type
        /// </summary>
        public static List<TDestination> MapList<TSource, TDestination>(
            this IMapper mapper, 
            IEnumerable<TSource> source)
        {
            return mapper.Map<List<TDestination>>(source);
        }

        /// <summary>
        /// Maps source to destination with null checking
        /// </summary>
        public static TDestination? MapOrDefault<TSource, TDestination>(
            this IMapper mapper, 
            TSource? source) where TDestination : class
        {
            return source == null ? null : mapper.Map<TDestination>(source);
        }

        /// <summary>
        /// Updates an existing destination object from source
        /// </summary>
        public static TDestination MapTo<TSource, TDestination>(
            this IMapper mapper, 
            TSource source, 
            TDestination destination)
        {
            return mapper.Map(source, destination);
        }
    }
}
```

---

## 6️⃣ Updated Program.cs

```csharp
using Microsoft.OpenApi.Models;
using TechPathNavigator.Configurations;

namespace TechPathNavigator
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // ✅ Add application services using DI extension
            builder.Services.AddApplicationServices(builder.Configuration);

            // 🧩 Add Controllers with JSON options
            builder.Services.AddControllers()
                .AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.ReferenceHandler = 
                        System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles;
                });

            // 🌐 Swagger/OpenAPI Configuration
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "TechPathNavigator API",
                    Version = "v1",
                    Description = "Enhanced API with validation and mapping",
                    Contact = new OpenApiContact
                    {
                        Name = "TechPath Team",
                        Email = "support@techpath.com"
                    }
                });

                // Enable XML comments if available
                var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                if (File.Exists(xmlPath))
                {
                    c.IncludeXmlComments(xmlPath);
                }
            });

            // 🌍 CORS Configuration
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowAll", policy =>
                {
                    policy.AllowAnyOrigin()
                          .AllowAnyMethod()
                          .AllowAnyHeader();
                });
            });

            var app = builder.Build();

            // 🧭 Middleware Pipeline
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "TechPathNavigator API V1");
                    c.RoutePrefix = string.Empty;
                });
            }

            app.UseHttpsRedirection();
            app.UseCors("AllowAll");
            app.UseAuthorization();
            app.MapControllers();

            app.Run();
        }
    }
}
```

---

## 7️⃣ Updated Service Example with Mapper & Validator

### BLL/Services/Category/CategoryService.cs

```csharp
using AutoMapper;
using FluentValidation;
using TechPathNavigator.DTOs;
using TechPathNavigator.Extensions;
using TechPathNavigator.Models;
using TechPathNavigator.Repositories;

namespace TechPathNavigator.Services
{
    /// <summary>
    /// Category service with AutoMapper and FluentValidation integration
    /// Follows clean architecture principles
    /// </summary>
    public class CategoryService : ICategoryService
    {
        private readonly ICategoryRepository _repository;
        private readonly IMapper _mapper;
        private readonly IValidator<CategoryPostDto> _validator;

        public CategoryService(
            ICategoryRepository repository,
            IMapper mapper,
            IValidator<CategoryPostDto> validator)
        {
            _repository = repository;
            _mapper = mapper;
            _validator = validator;
        }

        public async Task<IEnumerable<CategoryGetDto>> GetAllCategoriesAsync()
        {
            var categories = await _repository.GetAllAsync();
            return _mapper.MapList<Category, CategoryGetDto>(categories);
        }

        public async Task<CategoryGetDto?> GetCategoryByIdAsync(int id)
        {
            var category = await _repository.GetByIdAsync(id);
            return _mapper.MapOrDefault<Category, CategoryGetDto>(category);
        }

        public async Task<CategoryGetDto> CreateCategoryAsync(CategoryPostDto dto)
        {
            // Validate using FluentValidation
            var validationResult = await _validator.ValidateAsync(dto);
            if (!validationResult.IsValid)
            {
                throw new ValidationException(validationResult.Errors);
            }

            // Map DTO to Entity using AutoMapper
            var category = _mapper.Map<Category>(dto);
            
            var created = await _repository.AddAsync(category);
            return _mapper.Map<CategoryGetDto>(created);
        }

        public async Task<CategoryGetDto?> UpdateCategoryAsync(int id, CategoryPostDto dto)
        {
            var validationResult = await _validator.ValidateAsync(dto);
            if (!validationResult.IsValid)
            {
                throw new ValidationException(validationResult.Errors);
            }

            var existing = await _repository.GetByIdAsync(id);
            if (existing == null) return null;

            _mapper.Map(dto, existing);
            var updated = await _repository.UpdateAsync(existing);
            
            return _mapper.MapOrDefault<Category, CategoryGetDto>(updated);
        }

        public async Task<bool> DeleteCategoryAsync(int id)
        {
            return await _repository.DeleteAsync(id);
        }
    }
}
```

---

## 8️⃣ Updated Controller with Validation

### API/Controllers/CategoryController.cs

```csharp
using Microsoft.AspNetCore.Mvc;
using TechPathNavigator.DTOs;
using TechPathNavigator.Services;
using FluentValidation;

namespace TechPathNavigator.Controllers
{
    /// <summary>
    /// Category management endpoints
    /// Handles CRUD operations with validation
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Produces("application/json")]
    public class CategoryController : ControllerBase
    {
        private readonly ICategoryService _service;

        public CategoryController(ICategoryService service)
        {
            _service = service;
        }

        /// <summary>
        /// Retrieves all categories
        /// </summary>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<CategoryGetDto>), StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<CategoryGetDto>>> GetAll()
        {
            var categories = await _service.GetAllCategoriesAsync();
            return Ok(categories);
        }

        /// <summary>
        /// Retrieves a category by ID
        /// </summary>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(CategoryGetDto), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<CategoryGetDto>> GetById(int id)
        {
            var category = await _service.GetCategoryByIdAsync(id);
            if (category == null)
                return NotFound(new { message = $"Category with ID {id} not found" });

            return Ok(category);
        }

        /// <summary>
        /// Creates a new category
        /// </summary>
        [HttpPost]
        [ProducesResponseType(typeof(CategoryGetDto), StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<CategoryGetDto>> Create([FromBody] CategoryPostDto dto)
        {
            try
            {
                var created = await _service.CreateCategoryAsync(dto);
                return CreatedAtAction(nameof(GetById), new { id = created.CategoryId }, created);
            }
            catch (ValidationException ex)
            {
                return BadRequest(new { errors = ex.Errors.Select(e => e.ErrorMessage) });
            }
        }

        /// <summary>
        /// Updates an existing category
        /// </summary>
        [HttpPut("{id}")]
        [ProducesResponseType(typeof(CategoryGetDto), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult<CategoryGetDto>> Update(int id, [FromBody] CategoryPostDto dto)
        {
            try
            {
                var updated = await _service.UpdateCategoryAsync(id, dto);
                if (updated == null)
                    return NotFound(new { message = $"Category with ID {id} not found" });

                return Ok(updated);
            }
            catch (ValidationException ex)
            {
                return BadRequest(new { errors = ex.Errors.Select(e => e.ErrorMessage) });
            }
        }

        /// <summary>
        /// Deletes a category
        /// </summary>
        [HttpDelete("{id}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> Delete(int id)
        {
            var result = await _service.DeleteCategoryAsync(id);
            if (!result)
                return NotFound(new { message = $"Category with ID {id} not found" });

            return NoContent();
        }
    }
}
```

---

## 9️⃣ Updated .csproj File

```xml
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <!-- Entity Framework Core -->
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <!-- AutoMapper -->
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="13.0.1" />

    <!-- FluentValidation -->
    <PackageReference Include="FluentValidation" Version="11.9.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.0" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" Version="11.9.0" />

    <!-- Swagger -->
    <PackageReference Include="Swashbuckle.AspNetCore" Version="9.0.6" />
  </ItemGroup>

</Project>
```

---

## 🔟 Additional Validations Examples

### BLL/Validations/User/UserPostDtoValidator.cs

```csharp
using FluentValidation;
using TechPathNavigator.DTOs.User;

namespace TechPathNavigator.BLL.Validations.User
{
    /// <summary>
    /// Validator for user registration
    /// Enforces email format and password strength
    /// </summary>
    public class UserPostDtoValidator : AbstractValidator<UserPostDto>
    {
        public UserPostDtoValidator()
        {
            RuleFor(x => x.UserName)
                .NotEmpty().WithMessage("Username is required")
                .Length(3, 50).WithMessage("Username must be between 3 and 50 characters")
                .Matches(@"^[a-zA-Z0-9_]+$").WithMessage("Username can only contain letters, numbers, and underscores");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("Invalid email format")
                .MaximumLength(255).WithMessage("Email cannot exceed 255 characters");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Password is required")
                .MinimumLength(8).WithMessage("Password must be at least 8 characters")
                .Matches(@"[A-Z]").WithMessage("Password must contain at least one uppercase letter")
                .Matches(@"[a-z]").WithMessage("Password must contain at least one lowercase letter")
                .Matches(@"[0-9]").WithMessage("Password must contain at least one number")
                .Matches(@"[@$!%*?&#]").WithMessage("Password must contain at least one special character");
        }
    }
}
```

### BLL/Validations/Review/UserTechnologyReviewPostDtoValidator.cs

```csharp
using FluentValidation;
using TechPathNavigator.DTOs.Review;

namespace TechPathNavigator.BLL.Validations.Review
{
    /// <summary>
    /// Validator for technology reviews
    /// Ensures rating range and review content quality
    /// </summary>
    public class UserTechnologyReviewPostDtoValidator : AbstractValidator<UserTechnologyReviewPostDto>
    {
        public UserTechnologyReviewPostDtoValidator()
        {
            RuleFor(x => x.UserId)
                .GreaterThan(0).WithMessage("User ID must be valid");

            RuleFor(x => x.TechnologyId)
                .GreaterThan(0).WithMessage("Technology ID must be valid");

            RuleFor(x => x.Rating)
                .InclusiveBetween(1, 5).WithMessage("Rating must be between 1 and 5");

            RuleFor(x => x.ReviewText)
                .MinimumLength(10).WithMessage("Review must be at least 10 characters")
                .MaximumLength(2000).WithMessage("Review cannot exceed 2000 characters")
                .When(x => !string.IsNullOrWhiteSpace(x.ReviewText));
        }
    }
}
```

---

## 1️⃣1️⃣ Updated Repository with Generic Base

### DAL/Repositories/Category/CategoryRepository.cs

```csharp
using Microsoft.EntityFrameworkCore;
using TechPathNavigator.DAL.Repositories.Generic;
using TechPathNavigator.Data;
using TechPathNavigator.Models;

namespace TechPathNavigator.Repositories
{
    /// <summary>
    /// Category repository with custom operations
    /// Inherits from GenericRepository for common CRUD
    /// </summary>
    public class CategoryRepository : GenericRepository<Category>, ICategoryRepository
    {
        public CategoryRepository(ApplicationDbContext context) : base(context)
        {
        }

        /// <summary>
        /// Override to include subcategories in the query
        /// </summary>
        public override async Task<IEnumerable<Category>> GetAllAsync()
        {
            return await _dbSet
                .Include(c => c.SubCategories)
                .AsNoTracking()
                .ToListAsync();
        }

        /// <summary>
        /// Override to include subcategories when fetching by ID
        /// </summary>
        public override async Task<Category?> GetByIdAsync(int id)
        {
            return await _dbSet
                .Include(c => c.SubCategories)
                .FirstOrDefaultAsync(c => c.CategoryId == id);
        }

        /// <summary>
        /// Custom method: Get categories with technology count
        /// </summary>
        public async Task<IEnumerable<Category>> GetCategoriesWithSubCategoryCountAsync()
        {
            return await _dbSet
                .Include(c => c.SubCategories)
                .Select(c => new Category
                {
                    CategoryId = c.CategoryId,
                    CategoryName = c.CategoryName,
                    Description = c.Description,
                    SubCategories = c.SubCategories
                })
                .AsNoTracking()
                .ToListAsync();
        }
    }
}
```

### DAL/Repositories/Category/ICategoryRepository.cs

```csharp
using TechPathNavigator.DAL.Repositories.Generic;
using TechPathNavigator.Models;

namespace TechPathNavigator.Repositories
{
    /// <summary>
    /// Category repository interface
    /// Extends generic repository with custom operations
    /// </summary>
    public interface ICategoryRepository : IGenericRepository<Category>
    {
        Task<IEnumerable<Category>> GetCategoriesWithSubCategoryCountAsync();
    }
}
```

---

## 1️⃣2️⃣ Complete Mapping Profiles

### BLL/Mappings/UserMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs.User;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// User entity mapping profile
    /// Excludes password hash from GET operations
    /// </summary>
    public class UserMappingProfile : Profile
    {
        public UserMappingProfile()
        {
            // Entity to DTO (exclude password)
            CreateMap<User, UserGetDto>();

            // DTO to Entity
            CreateMap<UserPostDto, User>()
                .ForMember(dest => dest.UserId, opt => opt.Ignore())
                .ForMember(dest => dest.PasswordHash, opt => opt.Ignore()) // Handle separately
                .ForMember(dest => dest.Reviews, opt => opt.Ignore());

            CreateMap<UserUpdateDto, User>()
                .ForMember(dest => dest.UserId, opt => opt.Ignore())
                .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
                .ForMember(dest => dest.Reviews, opt => opt.Ignore())
                .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null));
        }
    }
}
```

### BLL/Mappings/InterviewQuestionMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// Interview question mapping profile
    /// </summary>
    public class InterviewQuestionMappingProfile : Profile
    {
        public InterviewQuestionMappingProfile()
        {
            CreateMap<InterviewQuestion, InterviewQuestionGetDto>();

            CreateMap<InterviewQuestionPostDto, InterviewQuestion>()
                .ForMember(dest => dest.QuestionId, opt => opt.Ignore())
                .ForMember(dest => dest.Technology, opt => opt.Ignore());
        }
    }
}
```

### BLL/Mappings/ReviewMappingProfile.cs

```csharp
using AutoMapper;
using TechPathNavigator.DTOs.Review;
using TechPathNavigator.Models;

namespace TechPathNavigator.BLL.Mappings
{
    /// <summary>
    /// User technology review mapping profile
    /// Includes related entity names
    /// </summary>
    public class ReviewMappingProfile : Profile
    {
        public ReviewMappingProfile()
        {
            CreateMap<UserTechnologyReview, UserTechnologyReviewGetDto>()
                .ForMember(dest => dest.UserName, 
                    opt => opt.MapFrom(src => src.User != null ? src.User.UserName : null))
                .ForMember(dest => dest.TechnologyName, 
                    opt => opt.MapFrom(src => src.Technology != null ? src.Technology.TechnologyName : null));

            CreateMap<UserTechnologyReviewPostDto, UserTechnologyReview>()
                .ForMember(dest => dest.ReviewId, opt => opt.Ignore())
                .ForMember(dest => dest.User, opt => opt.Ignore())
                .ForMember(dest => dest.Technology, opt => opt.Ignore());
        }
    }
}
```

---

## 1️⃣3️⃣ Service Layer Enhancements

### BLL/Services/Company/CompanyService.cs

```csharp
using AutoMapper;
using FluentValidation;
using TechPathNavigator.Common.Results;
using TechPathNavigator.DTOs;
using TechPathNavigator.Extensions;
using TechPathNavigator.Models;
using TechPathNavigator.Repositories;

namespace TechPathNavigator.Services
{
    /// <summary>
    /// Company service with validation and mapping
    /// Returns ServiceResult for better error handling
    /// </summary>
    public class CompanyService : ICompanyService
    {
        private readonly ICompanyRepository _repository;
        private readonly IMapper _mapper;
        private readonly IValidator<CompanyPostDto> _validator;

        public CompanyService(
            ICompanyRepository repository,
            IMapper mapper,
            IValidator<CompanyPostDto> validator)
        {
            _repository = repository;
            _mapper = mapper;
            _validator = validator;
        }

        public async Task<IEnumerable<CompanyGetDto>> GetAllAsync()
        {
            var companies = await _repository.GetAllAsync();
            return _mapper.MapList<Company, CompanyGetDto>(companies);
        }

        public async Task<CompanyGetDto?> GetByIdAsync(int id)
        {
            var company = await _repository.GetByIdAsync(id);
            return _mapper.MapOrDefault<Company, CompanyGetDto>(company);
        }

        public async Task<ServiceResult<CompanyGetDto>> CreateAsync(CompanyPostDto dto)
        {
            // Validate DTO
            var validationResult = await _validator.ValidateAsync(dto);
            if (!validationResult.IsValid)
            {
                return ServiceResult<CompanyGetDto>.Fail(validationResult.GetErrorMessages());
            }

            // Check for duplicate company name
            if (await _repository.CompanyNameExistsAsync(dto.CompanyName ?? ""))
            {
                return ServiceResult<CompanyGetDto>.Fail("A company with this name already exists");
            }

            // Map and save
            var company = _mapper.Map<Company>(dto);
            var created = await _repository.AddAsync(company);
            var result = _mapper.Map<CompanyGetDto>(created);

            return ServiceResult<CompanyGetDto>.Ok(result);
        }

        public async Task<ServiceResult<CompanyGetDto>> UpdateAsync(int id, CompanyPostDto dto)
        {
            var validationResult = await _validator.ValidateAsync(dto);
            if (!validationResult.IsValid)
            {
                return ServiceResult<CompanyGetDto>.Fail(validationResult.GetErrorMessages());
            }

            var existing = await _repository.GetByIdAsync(id);
            if (existing == null)
            {
                return ServiceResult<CompanyGetDto>.Fail("Company not found");
            }

            _mapper.Map(dto, existing);
            var updated = await _repository.UpdateAsync(existing);
            var result = _mapper.Map<CompanyGetDto>(updated);

            return ServiceResult<CompanyGetDto>.Ok(result);
        }

        public async Task<bool> DeleteAsync(int id)
        {
            return await _repository.DeleteAsync(id);
        }
    }
}
```

---

## 1️⃣4️⃣ Global Exception Handling Middleware

### Middleware/GlobalExceptionHandlerMiddleware.cs

```csharp
using FluentValidation;
using System.Net;
using System.Text.Json;

namespace TechPathNavigator.Middleware
{
    /// <summary>
    /// Global exception handler middleware
    /// Catches all unhandled exceptions and returns consistent error responses
    /// </summary>
    public class GlobalExceptionHandlerMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<GlobalExceptionHandlerMiddleware> _logger;

        public GlobalExceptionHandlerMiddleware(
            RequestDelegate next,
            ILogger<GlobalExceptionHandlerMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unhandled exception occurred");
                await HandleExceptionAsync(context, ex);
            }
        }

        private static Task HandleExceptionAsync(HttpContext context, Exception exception)
        {
            context.Response.ContentType = "application/json";

            var response = exception switch
            {
                ValidationException validationEx => new
                {
                    StatusCode = (int)HttpStatusCode.BadRequest,
                    Message = "Validation failed",
                    Errors = validationEx.Errors.Select(e => new
                    {
                        Property = e.PropertyName,
                        Error = e.ErrorMessage
                    })
                },
                KeyNotFoundException => new
                {
                    StatusCode = (int)HttpStatusCode.NotFound,
                    Message = exception.Message
                },
                UnauthorizedAccessException => new
                {
                    StatusCode = (int)HttpStatusCode.Unauthorized,
                    Message = "Unauthorized access"
                },
                _ => new
                {
                    StatusCode = (int)HttpStatusCode.InternalServerError,
                    Message = "An internal server error occurred"
                }
            };

            context.Response.StatusCode = response.StatusCode;

            return context.Response.WriteAsync(JsonSerializer.Serialize(response));
        }
    }

    /// <summary>
    /// Extension method to add global exception handler
    /// </summary>
    public static class GlobalExceptionHandlerExtensions
    {
        public static IApplicationBuilder UseGlobalExceptionHandler(this IApplicationBuilder app)
        {
            return app.UseMiddleware<GlobalExceptionHandlerMiddleware>();
        }
    }
}
```

### Update Program.cs to use middleware

```csharp
// Add after app.UseHttpsRedirection();
app.UseGlobalExceptionHandler();
```

---

## 1️⃣5️⃣ Testing Examples

### Create Test Project Structure

```bash
dotnet new xunit -n TechPathNavigator.Tests
dotnet add TechPathNavigator.Tests reference TechPathNavigator
cd TechPathNavigator.Tests
dotnet add package Moq
dotnet add package FluentAssertions
dotnet add package AutoMapper
```

### Tests/Services/CategoryServiceTests.cs

```csharp
using AutoMapper;
using FluentValidation;
using FluentValidation.Results;
using Moq;
using TechPathNavigator.DTOs;
using TechPathNavigator.Models;
using TechPathNavigator.Repositories;
using TechPathNavigator.Services;
using Xunit;
using FluentAssertions;

namespace TechPathNavigator.Tests.Services
{
    /// <summary>
    /// Unit tests for CategoryService
    /// Demonstrates testing with mocked dependencies
    /// </summary>
    public class CategoryServiceTests
    {
        private readonly Mock<ICategoryRepository> _repositoryMock;
        private readonly Mock<IMapper> _mapperMock;
        private readonly Mock<IValidator<CategoryPostDto>> _validatorMock;
        private readonly CategoryService _service;

        public CategoryServiceTests()
        {
            _repositoryMock = new Mock<ICategoryRepository>();
            _mapperMock = new Mock<IMapper>();
            _validatorMock = new Mock<IValidator<CategoryPostDto>>();
            
            _service = new CategoryService(
                _repositoryMock.Object,
                _mapperMock.Object,
                _validatorMock.Object
            );
        }

        [Fact]
        public async Task GetAllCategoriesAsync_ReturnsAllCategories()
        {
            // Arrange
            var categories = new List<Category>
            {
                new Category { CategoryId = 1, CategoryName = "Test1" },
                new Category { CategoryId = 2, CategoryName = "Test2" }
            };

            var categoryDtos = new List<CategoryGetDto>
            {
                new CategoryGetDto { CategoryId = 1, CategoryName = "Test1" },
                new CategoryGetDto { CategoryId = 2, CategoryName = "Test2" }
            };

            _repositoryMock.Setup(r => r.GetAllAsync())
                .ReturnsAsync(categories);

            _mapperMock.Setup(m => m.Map<List<CategoryGetDto>>(It.IsAny<IEnumerable<Category>>()))
                .Returns(categoryDtos);

            // Act
            var result = await _service.GetAllCategoriesAsync();

            // Assert
            result.Should().HaveCount(2);
            result.Should().BeEquivalentTo(categoryDtos);
            _repositoryMock.Verify(r => r.GetAllAsync(), Times.Once);
        }

        [Fact]
        public async Task CreateCategoryAsync_WithValidData_ReturnsCreatedCategory()
        {
            // Arrange
            var dto = new CategoryPostDto { Name = "New Category", Description = "Description" };
            var category = new Category { CategoryId = 1, CategoryName = "New Category" };
            var categoryDto = new CategoryGetDto { CategoryId = 1, CategoryName = "New Category" };

            _validatorMock.Setup(v => v.ValidateAsync(dto, default))
                .ReturnsAsync(new ValidationResult());

            _mapperMock.Setup(m => m.Map<Category>(dto))
                .Returns(category);

            _repositoryMock.Setup(r => r.AddAsync(category))
                .ReturnsAsync(category);

            _mapperMock.Setup(m => m.Map<CategoryGetDto>(category))
                .Returns(categoryDto);

            // Act
            var result = await _service.CreateCategoryAsync(dto);

            // Assert
            result.Should().NotBeNull();
            result.CategoryId.Should().Be(1);
            result.CategoryName.Should().Be("New Category");
        }

        [Fact]
        public async Task CreateCategoryAsync_WithInvalidData_ThrowsValidationException()
        {
            // Arrange
            var dto = new CategoryPostDto { Name = "", Description = "" };
            var validationFailures = new List<ValidationFailure>
            {
                new ValidationFailure("Name", "Category name is required")
            };

            _validatorMock.Setup(v => v.ValidateAsync(dto, default))
                .ReturnsAsync(new ValidationResult(validationFailures));

            // Act & Assert
            await Assert.ThrowsAsync<ValidationException>(
                async () => await _service.CreateCategoryAsync(dto)
            );
        }
    }
}
```

---

## 1️⃣6️⃣ Summary & Best Practices

### ✅ Key Improvements Implemented

1. **Generic Repository Pattern**
   - Reduces code duplication
   - Provides consistent CRUD operations
   - Easy to extend with custom methods

2. **FluentValidation**
   - Separates validation logic from business logic
   - Reusable and testable validators
   - Clear error messages

3. **AutoMapper**
   - Eliminates manual mapping code
   - Type-safe mappings
   - Easy to maintain

4. **Dependency Injection**
   - Centralized configuration
   - Loose coupling
   - Easy to test and swap implementations

5. **Clean Architecture**
   - Clear separation of concerns
   - Organized folder structure
   - Maintainable codebase

### 📋 Migration Checklist

- [ ] Install required NuGet packages
- [ ] Create folder structure
- [ ] Implement generic repository
- [ ] Add FluentValidation validators
- [ ] Create AutoMapper profiles
- [ ] Set up DependencyInjection.cs
- [ ] Update Program.cs
- [ ] Refactor services to use mapper & validators
- [ ] Update controllers with proper error handling
- [ ] Add global exception handler
- [ ] Write unit tests
- [ ] Update API documentation

### 🎯 Next Steps

1. Implement caching layer (Redis/Memory Cache)
2. Add authentication & authorization (JWT)
3. Implement logging (Serilog)
4. Add API versioning
5. Create integration tests
6. Add health checks
7. Implement rate limiting
8. Add API documentation (XML comments)

---

## 📚 Additional Resources

- [FluentValidation Documentation](https://docs.fluentvalidation.net/)
- [AutoMapper Documentation](https://docs.automapper.org/)
- [Generic Repository Pattern](https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application)
- [Clean Architecture by Robert C. Martin](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)

---

**🎉 Your TechPathNavigator project is now following industry-standard best practices!**